import com.sapher.youtubedl.YoutubeDL;
import com.sapher.youtubedl.YoutubeDLException;
import com.sapher.youtubedl.YoutubeDLRequest;
import com.sapher.youtubedl.YoutubeDLResponse;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.StringReader;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class SubtitleProcessor {

    /*
    Caption: Autogenerated by Youtube. Might not be precise.
    Subtitle: Might be more precise and more prioritized
     */

    public boolean idCapt = false;
    public boolean idSubs = false;
    public boolean enCapt = false;
    public boolean enSubs = false;
    protected String videoUrl = "";
    private Path dir;

    public SubtitleProcessor(String videoUrl, Path dir) {
        this.videoUrl = videoUrl;
        this.dir = dir;
    }

    // TODO: SRT parser, Generator

    public void checkSubs() throws IOException, YoutubeDLException {

        YoutubeDLRequest yt = new YoutubeDLRequest(this.videoUrl);
        yt.setOption("list-subs");
        YoutubeDLResponse res = YoutubeDL.execute(yt);

        BufferedReader reader = new BufferedReader(new StringReader(res.getOut()));
        String line;
        while ((line = reader.readLine()) != null) {
            if (line.contains("Available automatic captions")) {
                line = reader.readLine();
                while (!(line.contains("Available") || (line.contains("has no")))) {
                    String check = line.substring(0, 2);
                    if (check.equals("id")) {
                        idCapt = true;
                    } else if (check.equals("en")) {
                        enCapt = true;
                    }
                    line = reader.readLine();
                }
            }
            if (line.contains("Available subtitles")) {
                line = reader.readLine();
                while (line != null) {
                    String check = line.substring(0, 2);
                    if (check.equals("id")) {
                        idSubs = true;
                    } else if (check.equals("en")) {
                        enSubs = true;
                    }
                    line = reader.readLine();
                }
            }
        }
    }

    /**
     * Get the subtitle/closed-captions from the video.
     *
     * lang     type    description
     * x        x       Indonesian, subtitle
     * x        0       Indonesian, closed-caption
     * 0        x       English, subtitle
     * 0        0       English, closed-caption
     *
     * @param lang choose the language of the captions
     * @param type choose the type of the captions
     * @return void
     */
    public void getSub(int lang, int type) throws YoutubeDLException {
        YoutubeDLRequest yt = new YoutubeDLRequest(this.videoUrl);
        yt.setOption("sub-format", "vtt");
        yt.setOption("skip-download");

        // Boolean doesn't work? :/
        if (lang != 0 && type != 0) {
            yt.setOption("write-sub");
            yt.setOption("sub-lang", "id");
            yt.setOption("output", Paths.get(dir.toString(), "sub.%(id)s.%(ext)s").toString());
        } else if (lang != 0 && type == 0) {
            yt.setOption("write-auto-sub");
            yt.setOption("sub-lang", "id");
            yt.setOption("output", Paths.get(dir.toString(), "auto.%(id)s.%(ext)s").toString());
        } else if (lang == 0 && type != 0) {
            yt.setOption("write-sub");
            yt.setOption("sub-lang", "en");
            yt.setOption("output", Paths.get(dir.toString(), "sub.%(id)s.%(ext)s").toString());
        } else  if (lang == 0 && type == 0) {
            yt.setOption("write-auto-sub");
            yt.setOption("sub-lang", "en");
            yt.setOption("output", Paths.get(dir.toString(), "auto.%(id)s.%(ext)s").toString());
        }

        YoutubeDL.execute(yt);
    }

    public void getAllSub() {
        try {
            getSub(1, 1);
            getSub(1, 0);
            getSub(0, 1);
            getSub(0, 0);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
